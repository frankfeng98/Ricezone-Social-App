{"ast":null,"code":"import { createReducer, current } from \"@reduxjs/toolkit\";\nimport storage from 'redux-persist/lib/storage';\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS, FETCH_FOLLOWERS, REMOVE_FOLLOWERS, ADD_FOLLOWERS, UPDATE_HEADLINE, UPDATE_PROFILE, GET_PROFILE, LOG_OUT, addUsers, validateUsers, resetValidate, GET_HEADLINE, getHeadline } from \"./actions\";\nconst url = path => `http://localhost:3001${path}`;\nconst initialState = {\n  cookie: '',\n  userList: [],\n  userExisted: false,\n  userValidated: false,\n  postList: [],\n  currentPost: [],\n  displayPost: [],\n  postNum: 0,\n  userNum: 0,\n  currentUser: '',\n  profile_username: '',\n  timeStamp: '',\n  defaultHeadLine: 'hello world',\n  userHeadline: \"\",\n  followerList: [],\n  addFollowerSuccess: false,\n  followerReference: [{\n    'userId': 1,\n    'following': [2, 3, 4]\n  }, {\n    'userId': 2,\n    'following': [3, 4, 5]\n  }, {\n    'userId': 3,\n    'following': [4, 5, 6]\n  }, {\n    'userId': 4,\n    'following': [5, 6, 7]\n  }, {\n    'userId': 5,\n    'following': [6, 7, 8]\n  }, {\n    'userId': 6,\n    'following': [7, 8, 9]\n  }, {\n    'userId': 7,\n    'following': [8, 9, 10]\n  }, {\n    'userId': 8,\n    'following': [9, 10, 1]\n  }, {\n    'userId': 9,\n    'following': [10, 1, 2]\n  }, {\n    'userId': 10,\n    'following': [1, 2, 3]\n  }],\n  toggle: false\n};\nexport function riceZoneApp() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //load placehoder users\n    case USERS_LOADED:\n      let date = new Date();\n      let userList_placehoder = [];\n      action.payload.forEach(user => {\n        user['password1'] = user.address.street;\n        user['zipcode'] = user.address.zipcode;\n        userList_placehoder.push(user);\n      });\n      return {\n        ...state,\n        userNum: action.payload.length,\n        userList: [...userList_placehoder],\n        timeStamp: date.toLocaleString(),\n        defaultHeadLine: 'hello world'\n      };\n    case USERS_ADDED:\n      let payload = action.payload;\n      let userExists = false;\n      let userValidated = false;\n      let currentUser_register = '';\n      let cookie_register = '';\n      if (payload.data.result === \"User already exist\") {\n        userExists = true;\n        cookie_register = payload.cookie;\n      } else {\n        userValidated = true;\n        currentUser_register = payload.username;\n      }\n      return {\n        ...state,\n        userExisted: userExists,\n        userValidated: userValidated,\n        currentUser: currentUser_register,\n        cookie: cookie_register\n      };\n    case VALIDATE_USERS:\n      let logIn = action.payload;\n      let cookie = logIn.cookie;\n      let currentUser = logIn.data.username;\n      return {\n        ...state,\n        userValidated: true,\n        currentUser: currentUser,\n        cookie: cookie\n      };\n    case RESET_VALIDATE:\n      let toggle = !state.toggle;\n      return {\n        ...state,\n        toggle: toggle\n      };\n    case POSTS_LOADED:\n      return {\n        ...state,\n        postList: [...action.payload],\n        postNum: action.payload.length\n      };\n    case GET_POSTS:\n      let posts = [...state.postList];\n      let currentPosts = [];\n      posts.forEach(post => {\n        if (post.userId === action.payload.id) {\n          post['author'] = action.payload.username;\n          currentPosts.push(post);\n        }\n        state.followerList.forEach(follower => {\n          if (post.userId === follower.id) {\n            post['author'] = follower.username;\n            currentPosts.unshift(post);\n          }\n        });\n      });\n      return {\n        ...state,\n        currentPost: [...currentPosts],\n        displayPost: [...currentPosts]\n      };\n    case FITER_POSTS:\n      let filterPosts = [...state.currentPost];\n      let query = action.payload;\n      let displayPosts = [];\n      if (query === '') {\n        displayPosts = filterPosts;\n      } else {\n        filterPosts.forEach(post => {\n          if (post.title.toLowerCase().includes(query.toLowerCase()) || post.body.toLowerCase().includes(query.toLowerCase())) {\n            displayPosts.push(post);\n          }\n        });\n      }\n      return {\n        ...state,\n        displayPost: displayPosts\n      };\n    case ADD_POSTS:\n      let originalPosts = [...state.currentPost];\n      let postToBeAdd = action.payload;\n      let currentPostNum = state.postNum;\n      postToBeAdd['author'] = state.currentUser.username;\n      currentPostNum += 1;\n      postToBeAdd['id'] = currentPostNum;\n      originalPosts.unshift(postToBeAdd);\n      return {\n        ...state,\n        postNum: currentPostNum,\n        currentPost: originalPosts,\n        displayPost: originalPosts\n      };\n    case FETCH_FOLLOWERS:\n      let followerData = [...state.followerReference];\n      let follower = [];\n      followerData.forEach(user => {\n        if (user.userId === action.payload) {\n          follower = user.following.map((post, index) => {\n            let user_added = '';\n            state.userList.forEach(user => {\n              if (user.id === post) {\n                user_added = user;\n              }\n            });\n            return user_added;\n          });\n        }\n      });\n      return {\n        ...state,\n        followerList: [...follower]\n      };\n    case REMOVE_FOLLOWERS:\n      let currentFollower = [...state.followerList];\n      let filteredFollower = currentFollower.filter(follower => {\n        return follower.username !== action.payload.username;\n      });\n      return {\n        ...state,\n        followerList: [...filteredFollower]\n      };\n    case ADD_FOLLOWERS:\n      let currentFollowerList = [...state.followerList];\n      let addFollowerSuccess = false;\n      if (state.currentUser.username !== action.payload.follower) {\n        state.userList.forEach(user => {\n          if (user.username === action.payload.follower) {\n            currentFollowerList.unshift(user);\n            addFollowerSuccess = true;\n          }\n        });\n      }\n      return {\n        ...state,\n        followerList: [...currentFollowerList],\n        addFollowerSuccess: addFollowerSuccess\n      };\n    case GET_HEADLINE:\n      return {\n        ...state,\n        userHeadline: action.payload.headline\n      };\n    case UPDATE_HEADLINE:\n      let userheadline = [...state.userHeadlineList];\n      userheadline.forEach(user => {\n        if (user.userId === state.currentUser.id) {\n          user.headline = action.payload.headline;\n        }\n      });\n      return {\n        ...state,\n        userHeadlineList: [...userheadline]\n      };\n    case GET_PROFILE:\n      return {\n        ...state,\n        profile_username: action.payload\n      };\n    case UPDATE_PROFILE:\n      let updatedUser = {};\n      Object.assign(updatedUser, state.currentUser);\n      if (action.payload.email !== '') {\n        updatedUser.email = action.payload.email;\n      }\n      if (action.payload.phone !== '') {\n        updatedUser.phone = action.payload.phone;\n      }\n      if (action.payload.zipcode !== '') {\n        updatedUser.zipcode = action.payload.zipcode;\n      }\n      if (action.payload.password1 !== '') {\n        updatedUser.password1 = action.payload.password;\n      }\n      return {\n        ...state,\n        currentUser: updatedUser\n      };\n    case LOG_OUT:\n      storage.removeItem('root');\n      return initialState;\n    default:\n      return state;\n  }\n}\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n}\nexport function createUser(payload) {\n  return async function createUser(dispatch, getState) {\n    const response = await fetch(url('/register'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const cookie = response.headers.get(\"set-cookie\");\n    const data = await response.json();\n    const payload = {\n      cookie: cookie,\n      data: data\n    };\n    dispatch(addUsers(payload));\n  };\n}\nexport function logInUser(payload) {\n  return async function logInUser(dispatch, getState) {\n    const response = await fetch(url('/login'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.status == 200) {\n      const cookie = response.headers.get(\"set-cookie\");\n      const data = await response.json();\n      const payload = {\n        cookie: cookie,\n        data: data\n      };\n      dispatch(validateUsers(payload));\n    } else {\n      dispatch(resetValidate());\n    }\n  };\n}\nexport function fetchHeadline(payload) {\n  return async function fetchHeadline(dispatch, getState) {\n    let response;\n    console.log(cookie);\n    response = await fetch(url(`/headline/${payload.username}`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'cookie': payload.cookie\n      }\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getHeadline(data));\n    }\n  };\n}\nexport default {\n  riceZoneApp\n};","map":{"version":3,"names":["createReducer","current","storage","loadUsers","loadPosts","USERS_LOADED","USERS_ADDED","VALIDATE_USERS","RESET_VALIDATE","POSTS_LOADED","GET_POSTS","FITER_POSTS","ADD_POSTS","FETCH_FOLLOWERS","REMOVE_FOLLOWERS","ADD_FOLLOWERS","UPDATE_HEADLINE","UPDATE_PROFILE","GET_PROFILE","LOG_OUT","addUsers","validateUsers","resetValidate","GET_HEADLINE","getHeadline","url","path","initialState","cookie","userList","userExisted","userValidated","postList","currentPost","displayPost","postNum","userNum","currentUser","profile_username","timeStamp","defaultHeadLine","userHeadline","followerList","addFollowerSuccess","followerReference","toggle","riceZoneApp","state","action","type","date","Date","userList_placehoder","payload","forEach","user","address","street","zipcode","push","length","toLocaleString","userExists","currentUser_register","cookie_register","data","result","username","logIn","posts","currentPosts","post","userId","id","follower","unshift","filterPosts","query","displayPosts","title","toLowerCase","includes","body","originalPosts","postToBeAdd","currentPostNum","followerData","following","map","index","user_added","currentFollower","filteredFollower","filter","currentFollowerList","headline","userheadline","userHeadlineList","updatedUser","Object","assign","email","phone","password1","password","removeItem","fetchUsers","dispatch","getState","response","fetch","json","fetchPosts","createUser","method","headers","JSON","stringify","get","logInUser","status","fetchHeadline","console","log"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer, current } from \"@reduxjs/toolkit\"\nimport storage from 'redux-persist/lib/storage';\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS, FETCH_FOLLOWERS, REMOVE_FOLLOWERS, ADD_FOLLOWERS, UPDATE_HEADLINE, UPDATE_PROFILE, GET_PROFILE, LOG_OUT, addUsers, validateUsers, resetValidate, GET_HEADLINE, getHeadline } from \"./actions\"\n\n\nconst url = path => `http://localhost:3001${path}`;\nconst initialState = {\n    cookie: '',\n    userList: [],\n    userExisted: false,\n    userValidated: false,\n    postList: [],\n    currentPost: [],\n    displayPost: [],\n    postNum: 0,\n    userNum: 0,\n    currentUser: '',\n    profile_username: '',\n    timeStamp: '',\n    defaultHeadLine: 'hello world',\n    userHeadline: \"\",\n    followerList: [],\n    addFollowerSuccess: false,\n    followerReference: [\n        {'userId': 1, 'following': [2, 3, 4]},\n        {'userId': 2, 'following': [3, 4, 5]},\n        {'userId': 3, 'following': [4, 5, 6]},\n        {'userId': 4, 'following': [5, 6, 7]},\n        {'userId': 5, 'following': [6, 7, 8]},\n        {'userId': 6, 'following': [7, 8, 9]},\n        {'userId': 7, 'following': [8, 9, 10]},\n        {'userId': 8, 'following': [9, 10, 1]},\n        {'userId': 9, 'following': [10, 1, 2]},\n        {'userId': 10, 'following': [1, 2, 3]}\n    ],\n    toggle: false\n}\n\nexport function riceZoneApp( state = initialState, action) {\n    switch (action.type) {\n        //load placehoder users\n        case USERS_LOADED:\n            let date = new Date();\n            let userList_placehoder = []\n            action.payload.forEach(user => {\n                user['password1'] = user.address.street\n                user['zipcode'] = user.address.zipcode\n                userList_placehoder.push(user)\n            });\n            return {\n                ...state,\n                userNum: action.payload.length,\n                userList: [...userList_placehoder],\n                timeStamp: date.toLocaleString(),\n                defaultHeadLine: 'hello world'\n            }\n        case USERS_ADDED:\n            let payload = action.payload;\n            let userExists = false;\n            let userValidated = false;\n            let currentUser_register = ''; \n            let cookie_register = '';\n            if (payload.data.result === \"User already exist\") {\n                userExists = true;\n                cookie_register = payload.cookie;\n            } else {\n                userValidated = true;\n                currentUser_register = payload.username;\n            }\n            return {\n                ...state,\n                userExisted: userExists,\n                userValidated: userValidated,\n                currentUser: currentUser_register,\n                cookie: cookie_register\n            }\n        case VALIDATE_USERS:\n            let logIn = action.payload;\n            let cookie = logIn.cookie;\n            let currentUser = logIn.data.username;\n            return {\n                ...state,\n                userValidated: true,\n                currentUser: currentUser,\n                cookie: cookie\n            }\n        case RESET_VALIDATE:\n            let toggle = !state.toggle;\n            return {\n                ...state,\n                toggle: toggle\n            }       \n        case POSTS_LOADED:\n            return {\n                ...state,\n                postList: [...action.payload],\n                postNum: action.payload.length\n            }  \n        case GET_POSTS:\n            let posts = [...state.postList];\n            let currentPosts = [];\n            posts.forEach(post => {\n                if (post.userId === action.payload.id) {\n                    post['author'] = action.payload.username;\n                    currentPosts.push(post);\n                }\n                state.followerList.forEach(follower => {\n                    if (post.userId === follower.id) {\n                        post['author'] = follower.username;\n                        currentPosts.unshift(post);\n                    }\n                })\n            });\n            return {\n                ...state,\n                currentPost: [...currentPosts],\n                displayPost: [...currentPosts]\n            }\n        case FITER_POSTS:\n            let filterPosts = [...state.currentPost];\n            let query = action.payload;\n            let displayPosts = [];\n            if (query === '') {\n                displayPosts = filterPosts;\n            } else {\n                filterPosts.forEach(post => {\n                    if (post.title.toLowerCase().includes(query.toLowerCase()) || post.body.toLowerCase().includes(query.toLowerCase())) {\n                        displayPosts.push(post);\n                    }\n                })  \n            }\n            return {\n                ...state,\n                displayPost: displayPosts\n            }\n        case ADD_POSTS:\n            let originalPosts = [...state.currentPost];\n            let postToBeAdd = action.payload;\n            let currentPostNum = state.postNum;\n            postToBeAdd['author'] = state.currentUser.username;\n            currentPostNum += 1;\n            postToBeAdd['id'] = currentPostNum;\n            originalPosts.unshift(postToBeAdd);\n            return {\n                ...state,\n                postNum: currentPostNum,\n                currentPost: originalPosts,\n                displayPost: originalPosts\n            }  \n        case FETCH_FOLLOWERS:\n            let followerData = [...state.followerReference];\n            let follower = [];\n            followerData.forEach(user => {\n                if (user.userId === action.payload) {\n                    follower = user.following.map((post, index) => {\n                        let user_added = '';\n                        state.userList.forEach(user => {\n                            if (user.id === post) {\n                                user_added = user;\n                            }\n                        })\n                        return user_added;\n                    })\n                }\n            });\n            return {\n                ...state,\n                followerList: [...follower]\n            } \n        case REMOVE_FOLLOWERS:\n            let currentFollower = [...state.followerList]\n            let filteredFollower = currentFollower.filter((follower) => {\n                return follower.username !== action.payload.username;\n            });\n            return {\n                ...state,\n                followerList: [...filteredFollower]\n            }  \n        case ADD_FOLLOWERS:\n             let currentFollowerList = [...state.followerList]\n             let addFollowerSuccess = false;\n             if (state.currentUser.username !== action.payload.follower) {\n                state.userList.forEach(user => {\n                    if (user.username === action.payload.follower) {\n                        currentFollowerList.unshift(user);\n                        addFollowerSuccess = true;\n                    }\n                 })\n             }\n             return {\n                ...state,\n                followerList: [...currentFollowerList],\n                addFollowerSuccess: addFollowerSuccess\n             }\n        case GET_HEADLINE:\n             return {\n                ...state,\n                userHeadline: action.payload.headline\n             }\n        case UPDATE_HEADLINE:\n            let userheadline = [...state.userHeadlineList];\n            userheadline.forEach(user => {\n                if (user.userId === state.currentUser.id) {\n                    user.headline = action.payload.headline;\n                }\n            });\n            return {\n                ...state,\n                userHeadlineList: [...userheadline]\n            } \n        case GET_PROFILE:\n            return {\n                ...state,\n                profile_username: action.payload\n            }   \n        case UPDATE_PROFILE:\n            let updatedUser = {}\n            Object.assign(updatedUser, state.currentUser);\n            if (action.payload.email !== '') {\n                updatedUser.email = action.payload.email;\n            }\n            if (action.payload.phone !== '') {\n                updatedUser.phone = action.payload.phone;\n            }\n            if (action.payload.zipcode !== '') {\n                updatedUser.zipcode = action.payload.zipcode;\n            }\n            if (action.payload.password1 !== '') {\n                updatedUser.password1 = action.payload.password;\n            }\n            return {\n                ...state,\n                currentUser: updatedUser\n            }  \n        case LOG_OUT:\n            storage.removeItem('root');\n            return initialState           \n        default:\n            return state;\n    }\n}\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n}\n\n\nexport function createUser(payload) {\n    return async function createUser(dispatch, getState) {\n        const response = await fetch(url('/register'), {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload)\n        });\n        const cookie = response.headers.get(\"set-cookie\");\n        const data = await response.json();\n        const payload = {cookie: cookie, data: data};\n        dispatch(addUsers(payload));\n    }\n}\n\nexport function logInUser(payload) {\n    return async function logInUser(dispatch, getState) {\n        const response = await fetch(url('/login'), {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload)\n        });\n        if (response.status == 200) {\n            const cookie = response.headers.get(\"set-cookie\");\n            const data = await response.json();\n            const payload = {cookie: cookie, data: data};\n            dispatch(validateUsers(payload));\n        } else {\n            dispatch(resetValidate());\n        }\n    }\n}\n\nexport function fetchHeadline(payload) {\n    return async function fetchHeadline(dispatch, getState) {\n        let response;\n        console.log(cookie);\n        response = await fetch(url(`/headline/${payload.username}`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json', 'cookie': payload.cookie}\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getHeadline(data));\n        }\n    }\n}\n\nexport default {riceZoneApp} ;"],"mappings":"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"},"metadata":{},"sourceType":"module"}