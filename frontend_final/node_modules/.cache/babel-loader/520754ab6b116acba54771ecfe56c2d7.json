{"ast":null,"code":"import { createReducer, current } from \"@reduxjs/toolkit\";\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS } from \"./actions\";\nconst initialState = {\n  userList: [],\n  userValidated: false,\n  postList: [],\n  currentPost: [],\n  displayPost: [],\n  postNum: 0,\n  userNum: 0,\n  currentUserID: '',\n  currentUser: ''\n};\nexport function riceZoneApp() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // update the rice zone state\n    case USERS_LOADED:\n      return {\n        ...state,\n        userNum: action.payload.length,\n        userList: [...action.payload]\n      };\n    case USERS_ADDED:\n      let userList = [...state.userList];\n      let payload = action.payload;\n      let num = state.userNum;\n      num++;\n      payload['id'] = state.userNum + 1;\n      userList.push(payload);\n      return {\n        ...state,\n        userList: userList,\n        userNum: num,\n        currentUserID: num\n      };\n    case VALIDATE_USERS:\n      let logIn = action.payload;\n      let result = false;\n      let userID;\n      let userName;\n      state.userList.forEach(user => {\n        if (user.username === logIn.username) {\n          if (user.password1) {\n            if (user.password1 == logIn.password) {\n              result = true;\n              userID = user.id;\n              userName = user.username;\n            }\n          } else {\n            if (user.address.street == logIn.password) {\n              result = true;\n              userID = user.id;\n              userName = user.username;\n            }\n          }\n        }\n      });\n      return {\n        ...state,\n        usersValidated: result,\n        currentUserID: userID,\n        currentUser: userName\n      };\n    case RESET_VALIDATE:\n      return {\n        ...state,\n        usersValidated: false\n      };\n    case POSTS_LOADED:\n      return {\n        ...state,\n        postList: [...action.payload],\n        postNum: action.payload.length\n      };\n    case GET_POSTS:\n      let posts = [...state.postList];\n      let currentPosts = [];\n      posts.forEach(post => {\n        if (post.userId === action.payload) {\n          currentPosts.push(post);\n        }\n      });\n      return {\n        ...state,\n        currentPost: [...currentPosts],\n        displayPost: [...currentPosts]\n      };\n    case FITER_POSTS:\n      let filterPosts = [...state.currentPost];\n      let query = action.payload;\n      let displayPosts = [];\n      if (query === '') {\n        displayPosts = filterPosts;\n      } else {\n        filterPosts.forEach(post => {\n          if (post.title.toLowerCase().includes(query.toLowerCase()) || post.body.toLowerCase().includes(query.toLowerCase())) {\n            displayPosts.push(post);\n          }\n        });\n      }\n      return {\n        ...state,\n        displayPost: displayPosts\n      };\n    case ADD_POSTS:\n      let originalPosts = [...state.currentPost];\n      let postToBeAdd = action.payload;\n      let currentPostNum = state.postNum;\n      currentPostNum++;\n      postToBeAdd['id'] = currentPostNum;\n      originalPosts.unshift(action.payload);\n      return {\n        ...state,\n        currentPost: originalPosts,\n        displayPost: originalPosts\n      };\n    default:\n      return state;\n  }\n}\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n}\nexport default {\n  riceZoneApp\n};","map":{"version":3,"names":["createReducer","current","loadUsers","loadPosts","USERS_LOADED","USERS_ADDED","VALIDATE_USERS","RESET_VALIDATE","POSTS_LOADED","GET_POSTS","FITER_POSTS","ADD_POSTS","initialState","userList","userValidated","postList","currentPost","displayPost","postNum","userNum","currentUserID","currentUser","riceZoneApp","state","action","type","payload","length","num","push","logIn","result","userID","userName","forEach","user","username","password1","password","id","address","street","usersValidated","posts","currentPosts","post","userId","filterPosts","query","displayPosts","title","toLowerCase","includes","body","originalPosts","postToBeAdd","currentPostNum","unshift","fetchUsers","dispatch","getState","response","fetch","data","json","fetchPosts"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw4-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer, current } from \"@reduxjs/toolkit\"\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS } from \"./actions\"\n\nconst initialState = {\n    userList: [],\n    userValidated: false,\n    postList: [],\n    currentPost: [],\n    displayPost: [],\n    postNum: 0,\n    userNum: 0,\n    currentUserID: '',\n    currentUser: ''\n}\n\nexport function riceZoneApp( state = initialState, action) {\n    switch (action.type) {\n        // update the rice zone state\n        case USERS_LOADED:\n            return {\n                ...state,\n                userNum: action.payload.length,\n                userList: [...action.payload]\n            }\n        case USERS_ADDED:\n            let userList = [...state.userList];\n            let payload = action.payload;\n            let num = state.userNum;\n            num++;\n            payload['id'] = state.userNum + 1;\n            userList.push(payload);\n            return {\n                ...state,\n                userList: userList,\n                userNum: num,\n                currentUserID: num\n            }\n        case VALIDATE_USERS:\n            let logIn = action.payload;\n            let result = false;\n            let userID;\n            let userName;\n            state.userList.forEach(user => {\n                if (user.username === logIn.username) {\n                    if (user.password1) {\n                        if (user.password1 == logIn.password) {\n                            result = true;\n                            userID = user.id; \n                            userName = user.username;\n                        }\n                    } else {\n                        if (user.address.street == logIn.password) {\n                            result = true;\n                            userID = user.id; \n                            userName = user.username;\n                        }\n                    }\n                    \n                }\n            });\n            return {\n                ...state,\n                usersValidated: result,\n                currentUserID: userID,\n                currentUser: userName\n            }\n        case RESET_VALIDATE:\n            return {\n                ...state,\n                usersValidated: false\n            }       \n        case POSTS_LOADED:\n            return {\n                ...state,\n                postList: [...action.payload],\n                postNum: action.payload.length\n            }  \n        case GET_POSTS:\n            let posts = [...state.postList];\n            let currentPosts = [];\n            posts.forEach(post => {\n                if (post.userId === action.payload) {\n                    currentPosts.push(post);\n                }\n            });\n            return {\n                ...state,\n                currentPost: [...currentPosts],\n                displayPost: [...currentPosts]\n            }\n        case FITER_POSTS:\n            let filterPosts = [...state.currentPost];\n            let query = action.payload;\n            let displayPosts = [];\n            if (query === '') {\n                displayPosts = filterPosts;\n            } else {\n                filterPosts.forEach(post => {\n                    if (post.title.toLowerCase().includes(query.toLowerCase()) || post.body.toLowerCase().includes(query.toLowerCase())) {\n                        displayPosts.push(post);\n                    }\n                })  \n            }\n            return {\n                ...state,\n                displayPost: displayPosts\n            }\n        case ADD_POSTS:\n            let originalPosts = [...state.currentPost];\n            let postToBeAdd = action.payload;\n            let currentPostNum = state.postNum;\n            currentPostNum++;\n            postToBeAdd['id'] = currentPostNum;\n            originalPosts.unshift(action.payload);\n            return {\n                ...state,\n                currentPost: originalPosts,\n                displayPost: originalPosts\n            }           \n        default:\n            return state;\n    }\n}\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n}\n\nexport default {riceZoneApp} ;"],"mappings":"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"},"metadata":{},"sourceType":"module"}