{"ast":null,"code":"import { createReducer, current } from \"@reduxjs/toolkit\";\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS, FETCH_FOLLOWERS, REMOVE_FOLLOWERS, ADD_FOLLOWERS, UPDATE_HEADLINE, UPDATE_PROFILE, GET_PROFILE, LOG_OUT } from \"./actions\";\nconst url = path => `http://localhost:3000${path}`;\nconst initialState = {\n  userList: [],\n  userValidated: false,\n  postList: [],\n  currentPost: [],\n  displayPost: [],\n  postNum: 0,\n  userNum: 0,\n  currentUser: '',\n  profile_username: '',\n  timeStamp: '',\n  defaultHeadLine: 'hello world',\n  userHeadlineList: [{\n    'userId': 1,\n    'headline': 'hello world'\n  }, {\n    'userId': 2,\n    'headline': 'hello world'\n  }, {\n    'userId': 3,\n    'headline': 'hello world'\n  }, {\n    'userId': 4,\n    'headline': 'hello world'\n  }, {\n    'userId': 5,\n    'headline': 'hello world'\n  }, {\n    'userId': 6,\n    'headline': 'hello world'\n  }, {\n    'userId': 7,\n    'headline': 'hello world'\n  }, {\n    'userId': 8,\n    'headline': 'hello world'\n  }, {\n    'userId': 9,\n    'headline': 'hello world'\n  }, {\n    'userId': 10,\n    'headline': 'hello world'\n  }],\n  followerList: [],\n  addFollowerSuccess: false,\n  followerReference: [{\n    'userId': 1,\n    'following': [2, 3, 4]\n  }, {\n    'userId': 2,\n    'following': [3, 4, 5]\n  }, {\n    'userId': 3,\n    'following': [4, 5, 6]\n  }, {\n    'userId': 4,\n    'following': [5, 6, 7]\n  }, {\n    'userId': 5,\n    'following': [6, 7, 8]\n  }, {\n    'userId': 6,\n    'following': [7, 8, 9]\n  }, {\n    'userId': 7,\n    'following': [8, 9, 10]\n  }, {\n    'userId': 8,\n    'following': [9, 10, 1]\n  }, {\n    'userId': 9,\n    'following': [10, 1, 2]\n  }, {\n    'userId': 10,\n    'following': [1, 2, 3]\n  }]\n};\nexport function riceZoneApp() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //load placehoder users\n    case USERS_LOADED:\n      let date = new Date();\n      let userList_placehoder = [];\n      action.payload.forEach(user => {\n        user['password1'] = user.address.street;\n        user['zipcode'] = user.address.zipcode;\n        userList_placehoder.push(user);\n      });\n      return {\n        ...state,\n        userNum: action.payload.length,\n        userList: [...userList_placehoder],\n        timeStamp: date.toLocaleString(),\n        defaultHeadLine: 'hello world'\n      };\n    case USERS_ADDED:\n      let userList = [...state.userList];\n      let payload = action.payload;\n      return {\n        ...state\n      };\n    case VALIDATE_USERS:\n      let logIn = action.payload;\n      let result = false;\n      let currentUser;\n      state.userList.forEach(user => {\n        if (user.username === logIn.username) {\n          if (user.password1 == logIn.password) {\n            result = true;\n            currentUser = user;\n          }\n        }\n      });\n      return {\n        ...state,\n        userValidated: result,\n        currentUser: currentUser\n      };\n    case RESET_VALIDATE:\n      return {\n        ...state,\n        usersValidated: false\n      };\n    case POSTS_LOADED:\n      return {\n        ...state,\n        postList: [...action.payload],\n        postNum: action.payload.length\n      };\n    case GET_POSTS:\n      let posts = [...state.postList];\n      let currentPosts = [];\n      posts.forEach(post => {\n        if (post.userId === action.payload.id) {\n          post['author'] = action.payload.username;\n          currentPosts.push(post);\n        }\n        state.followerList.forEach(follower => {\n          if (post.userId === follower.id) {\n            post['author'] = follower.username;\n            currentPosts.unshift(post);\n          }\n        });\n      });\n      return {\n        ...state,\n        currentPost: [...currentPosts],\n        displayPost: [...currentPosts]\n      };\n    case FITER_POSTS:\n      let filterPosts = [...state.currentPost];\n      let query = action.payload;\n      let displayPosts = [];\n      if (query === '') {\n        displayPosts = filterPosts;\n      } else {\n        filterPosts.forEach(post => {\n          if (post.title.toLowerCase().includes(query.toLowerCase()) || post.body.toLowerCase().includes(query.toLowerCase())) {\n            displayPosts.push(post);\n          }\n        });\n      }\n      return {\n        ...state,\n        displayPost: displayPosts\n      };\n    case ADD_POSTS:\n      let originalPosts = [...state.currentPost];\n      let postToBeAdd = action.payload;\n      let currentPostNum = state.postNum;\n      postToBeAdd['author'] = state.currentUser.username;\n      currentPostNum += 1;\n      postToBeAdd['id'] = currentPostNum;\n      originalPosts.unshift(postToBeAdd);\n      return {\n        ...state,\n        postNum: currentPostNum,\n        currentPost: originalPosts,\n        displayPost: originalPosts\n      };\n    case FETCH_FOLLOWERS:\n      let followerData = [...state.followerReference];\n      let follower = [];\n      followerData.forEach(user => {\n        if (user.userId === action.payload) {\n          follower = user.following.map((post, index) => {\n            let user_added = '';\n            state.userList.forEach(user => {\n              if (user.id === post) {\n                user_added = user;\n              }\n            });\n            return user_added;\n          });\n        }\n      });\n      return {\n        ...state,\n        followerList: [...follower]\n      };\n    case REMOVE_FOLLOWERS:\n      let currentFollower = [...state.followerList];\n      let filteredFollower = currentFollower.filter(follower => {\n        return follower.username !== action.payload.username;\n      });\n      return {\n        ...state,\n        followerList: [...filteredFollower]\n      };\n    case ADD_FOLLOWERS:\n      let currentFollowerList = [...state.followerList];\n      let addFollowerSuccess = false;\n      if (state.currentUser.username !== action.payload.follower) {\n        state.userList.forEach(user => {\n          if (user.username === action.payload.follower) {\n            currentFollowerList.unshift(user);\n            addFollowerSuccess = true;\n          }\n        });\n      }\n      return {\n        ...state,\n        followerList: [...currentFollowerList],\n        addFollowerSuccess: addFollowerSuccess\n      };\n    case UPDATE_HEADLINE:\n      let userheadline = [...state.userHeadlineList];\n      userheadline.forEach(user => {\n        if (user.userId === state.currentUser.id) {\n          user.headline = action.payload.headline;\n        }\n      });\n      return {\n        ...state,\n        userHeadlineList: [...userheadline]\n      };\n    case GET_PROFILE:\n      return {\n        ...state,\n        profile_username: action.payload\n      };\n    case UPDATE_PROFILE:\n      let updatedUser = {};\n      Object.assign(updatedUser, state.currentUser);\n      if (action.payload.email !== '') {\n        updatedUser.email = action.payload.email;\n      }\n      if (action.payload.phone !== '') {\n        updatedUser.phone = action.payload.phone;\n      }\n      if (action.payload.zipcode !== '') {\n        updatedUser.zipcode = action.payload.zipcode;\n      }\n      if (action.payload.password1 !== '') {\n        updatedUser.password1 = action.payload.password;\n      }\n      return {\n        ...state,\n        currentUser: updatedUser\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        currentUser: '',\n        userValidated: false\n      };\n    default:\n      return state;\n  }\n}\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n}\nexport default {\n  riceZoneApp\n};","map":{"version":3,"names":["createReducer","current","loadUsers","loadPosts","USERS_LOADED","USERS_ADDED","VALIDATE_USERS","RESET_VALIDATE","POSTS_LOADED","GET_POSTS","FITER_POSTS","ADD_POSTS","FETCH_FOLLOWERS","REMOVE_FOLLOWERS","ADD_FOLLOWERS","UPDATE_HEADLINE","UPDATE_PROFILE","GET_PROFILE","LOG_OUT","url","path","initialState","userList","userValidated","postList","currentPost","displayPost","postNum","userNum","currentUser","profile_username","timeStamp","defaultHeadLine","userHeadlineList","followerList","addFollowerSuccess","followerReference","riceZoneApp","state","action","type","date","Date","userList_placehoder","payload","forEach","user","address","street","zipcode","push","length","toLocaleString","logIn","result","username","password1","password","usersValidated","posts","currentPosts","post","userId","id","follower","unshift","filterPosts","query","displayPosts","title","toLowerCase","includes","body","originalPosts","postToBeAdd","currentPostNum","followerData","following","map","index","user_added","currentFollower","filteredFollower","filter","currentFollowerList","userheadline","headline","updatedUser","Object","assign","email","phone","fetchUsers","dispatch","getState","response","fetch","data","json","fetchPosts"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer, current } from \"@reduxjs/toolkit\"\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS, FETCH_FOLLOWERS, REMOVE_FOLLOWERS, ADD_FOLLOWERS, UPDATE_HEADLINE, UPDATE_PROFILE, GET_PROFILE, LOG_OUT } from \"./actions\"\n\n\nconst url = path => `http://localhost:3000${path}`;\nconst initialState = {\n    userList: [],\n    userValidated: false,\n    postList: [],\n    currentPost: [],\n    displayPost: [],\n    postNum: 0,\n    userNum: 0,\n    currentUser: '',\n    profile_username: '',\n    timeStamp: '',\n    defaultHeadLine: 'hello world',\n    userHeadlineList: [\n        {'userId': 1, 'headline': 'hello world'},\n        {'userId': 2, 'headline': 'hello world'},\n        {'userId': 3, 'headline': 'hello world'},\n        {'userId': 4, 'headline': 'hello world'},\n        {'userId': 5, 'headline': 'hello world'},\n        {'userId': 6, 'headline': 'hello world'},\n        {'userId': 7, 'headline': 'hello world'},\n        {'userId': 8, 'headline': 'hello world'},\n        {'userId': 9, 'headline': 'hello world'},\n        {'userId': 10, 'headline': 'hello world'}\n    ],\n    followerList: [],\n    addFollowerSuccess: false,\n    followerReference: [\n        {'userId': 1, 'following': [2, 3, 4]},\n        {'userId': 2, 'following': [3, 4, 5]},\n        {'userId': 3, 'following': [4, 5, 6]},\n        {'userId': 4, 'following': [5, 6, 7]},\n        {'userId': 5, 'following': [6, 7, 8]},\n        {'userId': 6, 'following': [7, 8, 9]},\n        {'userId': 7, 'following': [8, 9, 10]},\n        {'userId': 8, 'following': [9, 10, 1]},\n        {'userId': 9, 'following': [10, 1, 2]},\n        {'userId': 10, 'following': [1, 2, 3]}\n    ]\n}\n\nexport function riceZoneApp( state = initialState, action) {\n    switch (action.type) {\n        //load placehoder users\n        case USERS_LOADED:\n            let date = new Date();\n            let userList_placehoder = []\n            action.payload.forEach(user => {\n                user['password1'] = user.address.street\n                user['zipcode'] = user.address.zipcode\n                userList_placehoder.push(user)\n            });\n            return {\n                ...state,\n                userNum: action.payload.length,\n                userList: [...userList_placehoder],\n                timeStamp: date.toLocaleString(),\n                defaultHeadLine: 'hello world'\n            }\n        case USERS_ADDED:\n            let userList = [...state.userList];\n            let payload = action.payload;\n            \n            return {\n                ...state\n            }\n        case VALIDATE_USERS:\n            let logIn = action.payload;\n            let result = false;\n            let currentUser;\n            state.userList.forEach(user => {\n                if (user.username === logIn.username) {\n                    if (user.password1 == logIn.password) {\n                        result = true;\n                        currentUser = user\n                    }\n                    \n                }\n            });\n            return {\n                ...state,\n                userValidated: result,\n                currentUser: currentUser\n            }\n        case RESET_VALIDATE:\n            return {\n                ...state,\n                usersValidated: false\n            }       \n        case POSTS_LOADED:\n            return {\n                ...state,\n                postList: [...action.payload],\n                postNum: action.payload.length\n            }  \n        case GET_POSTS:\n            let posts = [...state.postList];\n            let currentPosts = [];\n            posts.forEach(post => {\n                if (post.userId === action.payload.id) {\n                    post['author'] = action.payload.username;\n                    currentPosts.push(post);\n                }\n                state.followerList.forEach(follower => {\n                    if (post.userId === follower.id) {\n                        post['author'] = follower.username;\n                        currentPosts.unshift(post);\n                    }\n                })\n            });\n            return {\n                ...state,\n                currentPost: [...currentPosts],\n                displayPost: [...currentPosts]\n            }\n        case FITER_POSTS:\n            let filterPosts = [...state.currentPost];\n            let query = action.payload;\n            let displayPosts = [];\n            if (query === '') {\n                displayPosts = filterPosts;\n            } else {\n                filterPosts.forEach(post => {\n                    if (post.title.toLowerCase().includes(query.toLowerCase()) || post.body.toLowerCase().includes(query.toLowerCase())) {\n                        displayPosts.push(post);\n                    }\n                })  \n            }\n            return {\n                ...state,\n                displayPost: displayPosts\n            }\n        case ADD_POSTS:\n            let originalPosts = [...state.currentPost];\n            let postToBeAdd = action.payload;\n            let currentPostNum = state.postNum;\n            postToBeAdd['author'] = state.currentUser.username;\n            currentPostNum += 1;\n            postToBeAdd['id'] = currentPostNum;\n            originalPosts.unshift(postToBeAdd);\n            return {\n                ...state,\n                postNum: currentPostNum,\n                currentPost: originalPosts,\n                displayPost: originalPosts\n            }  \n        case FETCH_FOLLOWERS:\n            let followerData = [...state.followerReference];\n            let follower = [];\n            followerData.forEach(user => {\n                if (user.userId === action.payload) {\n                    follower = user.following.map((post, index) => {\n                        let user_added = '';\n                        state.userList.forEach(user => {\n                            if (user.id === post) {\n                                user_added = user;\n                            }\n                        })\n                        return user_added;\n                    })\n                }\n            });\n            return {\n                ...state,\n                followerList: [...follower]\n            } \n        case REMOVE_FOLLOWERS:\n            let currentFollower = [...state.followerList]\n            let filteredFollower = currentFollower.filter((follower) => {\n                return follower.username !== action.payload.username;\n            });\n            return {\n                ...state,\n                followerList: [...filteredFollower]\n            }  \n        case ADD_FOLLOWERS:\n             let currentFollowerList = [...state.followerList]\n             let addFollowerSuccess = false;\n             if (state.currentUser.username !== action.payload.follower) {\n                state.userList.forEach(user => {\n                    if (user.username === action.payload.follower) {\n                        currentFollowerList.unshift(user);\n                        addFollowerSuccess = true;\n                    }\n                 })\n             }\n             return {\n                ...state,\n                followerList: [...currentFollowerList],\n                addFollowerSuccess: addFollowerSuccess\n             }   \n        case UPDATE_HEADLINE:\n            let userheadline = [...state.userHeadlineList];\n            userheadline.forEach(user => {\n                if (user.userId === state.currentUser.id) {\n                    user.headline = action.payload.headline;\n                }\n            });\n            return {\n                ...state,\n                userHeadlineList: [...userheadline]\n            } \n        case GET_PROFILE:\n            return {\n                ...state,\n                profile_username: action.payload\n            }   \n        case UPDATE_PROFILE:\n            let updatedUser = {}\n            Object.assign(updatedUser, state.currentUser);\n            if (action.payload.email !== '') {\n                updatedUser.email = action.payload.email;\n            }\n            if (action.payload.phone !== '') {\n                updatedUser.phone = action.payload.phone;\n            }\n            if (action.payload.zipcode !== '') {\n                updatedUser.zipcode = action.payload.zipcode;\n            }\n            if (action.payload.password1 !== '') {\n                updatedUser.password1 = action.payload.password;\n            }\n            return {\n                ...state,\n                currentUser: updatedUser\n            }  \n        case LOG_OUT:\n            return {\n                ...state,\n                currentUser: '',\n                userValidated: false\n            }              \n        default:\n            return state;\n    }\n}\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n}\n\nexport default {riceZoneApp} ;"],"mappings":"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"},"metadata":{},"sourceType":"module"}