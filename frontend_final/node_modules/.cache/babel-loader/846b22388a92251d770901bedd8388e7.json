{"ast":null,"code":"import * as Yup from 'yup';\nexport const validation = Yup.object({\n  accountName: Yup.string().matches(/^(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/, \"Account name can only contain letters and numbers\").required('Required'),\n  displayName: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  phone: Yup.string().matches(/[0-9]{3}-[0-9]{3}-[0-9]{4}/, \"Phone number is format 000-000-0000\").required('Required'),\n  dob: Yup.date().test(\"is18\", \"You must be 18 to regsiter\", function (value) {\n    let date = new Date(value);\n    const date18YearsAgo = new Date();\n    date18YearsAgo.setFullYear(date18YearsAgo.getFullYear() - 18);\n    return date <= date18YearsAgo;\n  }),\n  zipcode: Yup.string().matches(/[0-9]{5}/, \"Zipcode must be 5 digit\")\n});","map":{"version":3,"names":["Yup","validation","object","accountName","string","matches","required","displayName","email","phone","dob","date","test","value","Date","date18YearsAgo","setFullYear","getFullYear","zipcode"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw4-frankfeng98/ricezone/src/components/validation.js"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validation = Yup.object({\n    accountName: Yup.string()\n      .matches(/^(?=.*?[a-zA-Z])[a-zA-Z\\d]+$/, \"Account name can only contain letters and numbers\")\n      .required('Required'),\n    displayName: Yup.string()\n      .required('Required'),\n    email: Yup.string().email('Invalid email address').required('Required'),\n    phone: Yup.string().matches(/[0-9]{3}-[0-9]{3}-[0-9]{4}/, \"Phone number is format 000-000-0000\").required('Required'),\n    dob: Yup.date().test(\n        \"is18\",\n        \"You must be 18 to regsiter\",\n        function (value) {\n            let date = new Date(value);\n            const date18YearsAgo = new Date();\n            date18YearsAgo.setFullYear(date18YearsAgo.getFullYear() - 18);\n            return date <=date18YearsAgo;\n        }\n    ),\n    zipcode: Yup.string().matches(/[0-9]{5}/, \"Zipcode must be 5 digit\")\n  })"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,OAAO,MAAMC,UAAU,GAAGD,GAAG,CAACE,MAAM,CAAC;EACjCC,WAAW,EAAEH,GAAG,CAACI,MAAM,EAAE,CACtBC,OAAO,CAAC,8BAA8B,EAAE,mDAAmD,CAAC,CAC5FC,QAAQ,CAAC,UAAU,CAAC;EACvBC,WAAW,EAAEP,GAAG,CAACI,MAAM,EAAE,CACtBE,QAAQ,CAAC,UAAU,CAAC;EACvBE,KAAK,EAAER,GAAG,CAACI,MAAM,EAAE,CAACI,KAAK,CAAC,uBAAuB,CAAC,CAACF,QAAQ,CAAC,UAAU,CAAC;EACvEG,KAAK,EAAET,GAAG,CAACI,MAAM,EAAE,CAACC,OAAO,CAAC,4BAA4B,EAAE,qCAAqC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC;EACrHI,GAAG,EAAEV,GAAG,CAACW,IAAI,EAAE,CAACC,IAAI,CAChB,MAAM,EACN,4BAA4B,EAC5B,UAAUC,KAAK,EAAE;IACb,IAAIF,IAAI,GAAG,IAAIG,IAAI,CAACD,KAAK,CAAC;IAC1B,MAAME,cAAc,GAAG,IAAID,IAAI,EAAE;IACjCC,cAAc,CAACC,WAAW,CAACD,cAAc,CAACE,WAAW,EAAE,GAAG,EAAE,CAAC;IAC7D,OAAON,IAAI,IAAGI,cAAc;EAChC,CAAC,CACJ;EACDG,OAAO,EAAElB,GAAG,CAACI,MAAM,EAAE,CAACC,OAAO,CAAC,UAAU,EAAE,yBAAyB;AACrE,CAAC,CAAC"},"metadata":{},"sourceType":"module"}