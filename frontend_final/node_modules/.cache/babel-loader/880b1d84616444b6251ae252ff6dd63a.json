{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { loadUsers, loadPosts } from \"./actions\";\nconst initialState = {\n  userList: [],\n  userValidated: false,\n  postList: [],\n  currentPost: [],\n  userNum: 0,\n  currentUser: ''\n};\nconst riceZoneApp = createReducer([], builder => {\n  builder.addCase('usersLoaded', (state, action) => {\n    return {\n      ...state,\n      userNum: action.payload.length,\n      userList: [...action.payload]\n    };\n  }).addCase('usersAdded', (state, action) => {\n    let userList = [...state.userList];\n    let payload = action.payload;\n    let num = state.userNum;\n    num++;\n    payload['id'] = state.userNum + 1;\n    userList.push(payload);\n    return {\n      ...state,\n      userList: userList,\n      userNum: num,\n      currentUser: num\n    };\n  }).addCase('usersValidated', (state, action) => {\n    let logIn = action.payload;\n    state.userList.forEach(user => {\n      if (user.username === logIn.username) {\n        if (user.password1) {\n          if (user.password1 == logIn.password) {\n            state.userValidated = true;\n            state.currentUser = user.id;\n          }\n        } else {\n          if (user.address.street == logIn.password) {\n            state.userValidated = true;\n            state.currentUser = user.id;\n          }\n        }\n      }\n    });\n  }).addCase('resetValidate', (state, action) => {\n    state.userValidated = false;\n  }).addCase('postsLoaded', (state, action) => {\n    return {\n      ...state,\n      postList: [...action.payload]\n    };\n  }).addCase('getPosts', (state, action) => {\n    state.postList.forEach(post => {\n      if (post.userId === action.payload) {\n        state.currentPost.push(post);\n      }\n    });\n    console.log(state);\n  }).addDefaultCase((state, action) => {\n    return state;\n  });\n});\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n}\nexport default {\n  riceZoneApp\n};","map":{"version":3,"names":["createReducer","loadUsers","loadPosts","initialState","userList","userValidated","postList","currentPost","userNum","currentUser","riceZoneApp","builder","addCase","state","action","payload","length","num","push","logIn","forEach","user","username","password1","password","id","address","street","post","userId","console","log","addDefaultCase","fetchUsers","dispatch","getState","response","fetch","data","json","fetchPosts"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw4-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\"\nimport { loadUsers, loadPosts } from \"./actions\"\n\nconst initialState = {\n    userList: [],\n    userValidated: false,\n    postList: [],\n    currentPost: [],\n    userNum: 0,\n    currentUser: ''\n}\n\nconst riceZoneApp = createReducer([], (builder) => {\n    builder\n        .addCase('usersLoaded', (state, action) => {\n            return {\n                ...state,\n                userNum: action.payload.length,\n                userList: [...action.payload]\n            }\n        })\n        .addCase('usersAdded', (state, action) => {\n            let userList = [...state.userList];\n            let payload = action.payload;\n            let num = state.userNum;\n            num++;\n            payload['id'] = state.userNum + 1;\n            userList.push(payload);\n            return {\n                ...state,\n                userList: userList,\n                userNum: num,\n                currentUser: num\n            }\n        })\n        .addCase('usersValidated', (state, action) => {\n            let logIn = action.payload;\n            state.userList.forEach(user => {\n                if (user.username === logIn.username) {\n                    if (user.password1) {\n                        if (user.password1 == logIn.password) {\n                            state.userValidated = true;\n                            state.currentUser = user.id; \n                        }\n                    } else {\n                        if (user.address.street == logIn.password) {\n                            state.userValidated = true;\n                            state.currentUser = user.id; \n                        }\n                    }\n                    \n                }\n            });\n        })\n        .addCase('resetValidate', (state, action) => {\n            state.userValidated = false;\n        })\n        .addCase('postsLoaded', (state, action) => {\n            return {\n                ...state,\n                postList: [...action.payload]\n            }\n        })\n        .addCase('getPosts', (state, action) => {\n            state.postList.forEach(post => {\n                if (post.userId === action.payload) {\n                    state.currentPost.push(post);\n                }\n            });\n            console.log(state);\n        })\n        .addDefaultCase((state, action) => {\n            return state;\n        })\n})\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n}\n\nexport default {riceZoneApp} ;"],"mappings":"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"},"metadata":{},"sourceType":"module"}