{"ast":null,"code":"import { createReducer, current } from \"@reduxjs/toolkit\";\nimport { AccordionTitle } from \"flowbite-react/lib/esm/components/Accordion/AccordionTitle\";\nimport storage from 'redux-persist/lib/storage';\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS, FETCH_FOLLOWERS, REMOVE_FOLLOWERS, ADD_FOLLOWERS, UPDATE_HEADLINE, UPDATE_PROFILE, GET_EMAIL, LOG_OUT, addUsers, validateUsers, resetValidate, GET_HEADLINE, getHeadline, updateHeadline, fetchFollowers, addFollowers, removeFollowers, getPosts, addPosts, getEmail, getZipcode, GET_ZIPCODE, getPhone, getDOB, GET_DOB, UPDATE_EMAIL, updateEmail, updateZipcode, UPDATE_ZIPCODE, getAvatar, GET_AVATAR, updateAvatar } from \"./actions\";\nconst url = path => `http://localhost:3001${path}`;\nconst initialState = {\n  userList: [],\n  userExisted: false,\n  userValidated: false,\n  postList: [],\n  currentPost: \"\",\n  displayPost: \"\",\n  email: \"\",\n  zipcode: \"\",\n  dob: \"\",\n  currentUser: '',\n  profile_username: '',\n  userHeadline: \"\",\n  avatar: \"\",\n  followerList: [],\n  followerHeadlineList: [],\n  followerAddError: false,\n  toggle: false\n};\nexport function riceZoneApp() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //load placehoder users\n    case USERS_LOADED:\n      let date = new Date();\n      let userList_placehoder = [];\n      action.payload.forEach(user => {\n        user['password1'] = user.address.street;\n        user['zipcode'] = user.address.zipcode;\n        userList_placehoder.push(user);\n      });\n      return {\n        ...state,\n        userNum: action.payload.length,\n        userList: [...userList_placehoder],\n        timeStamp: date.toLocaleString(),\n        defaultHeadLine: 'hello world'\n      };\n    case USERS_ADDED:\n      let payload = action.payload;\n      let userExists = false;\n      let userValidated = false;\n      let currentUser_register = '';\n      if (payload.result === \"User already exist\") {\n        userExists = true;\n      } else {\n        userValidated = true;\n        currentUser_register = payload.username;\n      }\n      return {\n        ...state,\n        userExisted: userExists,\n        userValidated: userValidated,\n        currentUser: currentUser_register\n      };\n    case VALIDATE_USERS:\n      let logIn = action.payload;\n      let currentUser = logIn.username;\n      return {\n        ...state,\n        userValidated: true,\n        currentUser: currentUser\n      };\n    case RESET_VALIDATE:\n      let toggle = !state.toggle;\n      return {\n        ...state,\n        toggle: toggle\n      };\n    case POSTS_LOADED:\n      return {\n        ...state,\n        postList: [...action.payload],\n        postNum: action.payload.length\n      };\n    case GET_POSTS:\n      return {\n        ...state,\n        currentPost: [...action.payload.articles],\n        displayPost: [...action.payload.articles]\n      };\n    case FITER_POSTS:\n      let filterPosts = [...state.currentPost];\n      let query = action.payload;\n      let displayPosts = [];\n      if (query === '') {\n        displayPosts = filterPosts;\n      } else {\n        filterPosts.forEach(post => {\n          if (post.text.toLowerCase().includes(query.toLowerCase())) {\n            displayPosts.push(post);\n          }\n        });\n      }\n      return {\n        ...state,\n        displayPost: displayPosts\n      };\n    case ADD_POSTS:\n      return {\n        ...state,\n        currentPost: [...action.payload.articles],\n        displayPost: [...action.payload.articles]\n      };\n    case FETCH_FOLLOWERS:\n      let follower = [...action.payload.following.following];\n      let headlinelist = [...action.payload.headlineList];\n      return {\n        ...state,\n        followerList: [...follower],\n        followerHeadlineList: action.payload.headlineList\n      };\n    case REMOVE_FOLLOWERS:\n      let follower_headline_list = [...state.followerHeadlineList];\n      follower_headline_list = follower_headline_list.filter(user => user.username !== action.payload.username);\n      return {\n        ...state,\n        followerList: [...action.payload.following.following],\n        followerHeadlineList: [...follower_headline_list]\n      };\n    case ADD_FOLLOWERS:\n      let toggle_follower;\n      let followerAddError = state.followerAddError;\n      let follower_add = [...state.followerList];\n      let follower_headline = [...state.followerHeadlineList];\n      if (action.payload.following.following === \"user not found\" || action.payload.following.following === \"user already followed\") {\n        followerAddError = true;\n        toggle_follower = !state.toggle;\n      } else {\n        follower_add = [...action.payload.following.following];\n        followerAddError = false;\n        follower_headline.push(action.payload.headline);\n      }\n      return {\n        ...state,\n        followerList: follower_add,\n        followerAddError: followerAddError,\n        followerHeadlineList: [...follower_headline],\n        toggle: toggle_follower\n      };\n    case GET_HEADLINE:\n      return {\n        ...state,\n        userHeadline: action.payload.headline\n      };\n    case UPDATE_HEADLINE:\n      return {\n        ...state,\n        userHeadline: action.payload.headline\n      };\n    case GET_EMAIL:\n      return {\n        ...state,\n        email: action.payload.email\n      };\n    case UPDATE_EMAIL:\n      return {\n        ...state,\n        email: action.payload.email\n      };\n    case GET_ZIPCODE:\n      return {\n        ...state,\n        zipcode: action.payload.zipcode\n      };\n    case UPDATE_ZIPCODE:\n      return {\n        ...state,\n        zipcode: action.payload.zipcode\n      };\n    case GET_DOB:\n      return {\n        ...state,\n        dob: action.payload.dob\n      };\n    case GET_AVATAR:\n      return {\n        ...state,\n        avatar: action.payload.avatar\n      };\n    case GET_AVATAR:\n      return {\n        ...state,\n        avatar: action.payload.avatar\n      };\n    case LOG_OUT:\n      storage.removeItem('root');\n      return initialState;\n    default:\n      return state;\n  }\n}\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n}\nexport function createUser(payload) {\n  return async function createUser(dispatch, getState) {\n    const response = await fetch(url('/register'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload),\n      credentials: \"include\"\n    });\n    const data = await response.json();\n    dispatch(addUsers(data));\n  };\n}\nexport function logInUser(payload) {\n  return async function logInUser(dispatch, getState) {\n    const response = await fetch(url('/login'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload),\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(validateUsers(data));\n    } else {\n      dispatch(resetValidate());\n    }\n  };\n}\nexport function fetchHeadline(payload) {\n  return async function fetchHeadline(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/headline/${payload.username}`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getHeadline(data));\n    }\n  };\n}\nexport function updateHeadline_post(payload) {\n  return async function updateHeadline_post(dispatch, getState) {\n    let response;\n    let body = {\n      headline: payload.headline\n    };\n    response = await fetch(url(`/headline`), {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body),\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(updateHeadline(data));\n    }\n  };\n}\nexport function fetchFollowers_get(payload) {\n  return async function fetchFollowers_get(dispatch, getState) {\n    const response = await fetch(url(`/following/${payload.username}`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const following = await response.json();\n      let followerHeadlineList = [];\n      await Promise.all(following.following.map(async following => {\n        const response_headline = await fetch(url(`/headline/${following}`), {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: \"include\"\n        });\n        let follower = await response_headline.json();\n        followerHeadlineList.push(follower);\n      }));\n      const data = {\n        following: following,\n        headlineList: followerHeadlineList\n      };\n      dispatch(fetchFollowers(data));\n    }\n  };\n}\nexport function addFollowers_put(payload) {\n  return async function addFollowers_put(dispatch, getState) {\n    const response = await fetch(url(`/following/${payload.follower}`), {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const following = await response.json();\n      const response_headline = await fetch(url(`/headline/${payload.follower}`), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: \"include\"\n      });\n      const headline = await response_headline.json();\n      const data = {\n        following: following,\n        headline: headline\n      };\n      dispatch(fetchArticles(data));\n      dispatch(addFollowers(data));\n    }\n  };\n}\nexport function removeFollowers_delete(payload) {\n  return async function fetchFollowers_get(dispatch, getState) {\n    const response = await fetch(url(`/following/${payload.username}`), {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const following = await response.json();\n      const data = {\n        username: payload.username,\n        following: following\n      };\n      dispatch(fetchArticles(data));\n      dispatch(removeFollowers(data));\n    }\n  };\n}\nexport function fetchArticles(payload) {\n  return async function fetchArticles(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/articles`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getPosts(data));\n    }\n  };\n}\nexport function addArticles(payload) {\n  return async function addArticles(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/article`), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: payload.body\n      }),\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(addPosts(data));\n    }\n  };\n}\nexport function addComments(payload) {\n  return async function addComments(dispatch, getState) {\n    let req_body = {};\n    req_body['text'] = payload.comment;\n    req_body['commentId'] = -1;\n    let response = await fetch(url(`/articles/${payload.pid}`), {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(req_body),\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(fetchArticles(data));\n    }\n  };\n}\nexport function editArticle(payload) {\n  return async function editArticle(dispatch, getState) {\n    let req_body = {};\n    req_body['text'] = payload.text;\n    let response = await fetch(url(`/articles/${payload.pid}`), {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(req_body),\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(fetchArticles(data));\n    }\n  };\n}\nexport function editComment(payload) {\n  return async function editComment(dispatch, getState) {\n    let response = await fetch(url(`/articles/${payload.pid}`), {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload),\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(fetchArticles(data));\n    }\n  };\n}\nexport function fetchEmail(payload) {\n  return async function fetchEmail(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/email`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getEmail(data));\n    }\n  };\n}\nexport function fetchZipcode(payload) {\n  return async function fetchZipcode(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/zipcode`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getZipcode(data));\n    }\n  };\n}\nexport function fetchDOB(payload) {\n  return async function fetchDOB(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/dob`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getDOB(data));\n    }\n  };\n}\nexport function fetchAvatar(payload) {\n  return async function fetchAvatar(dispatch, getState) {\n    let response;\n    response = await fetch(url(`/avatar/${payload}`), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    });\n    if (response.status == 200) {\n      const data = await response.json();\n      dispatch(getAvatar(data));\n    }\n  };\n}\nexport function UpdateProfile_put(payload) {\n  return async function UpdateProfile_put(dispatch, getState) {\n    if (payload.email !== '') {\n      let response = await fetch(url(`/email`), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'email': payload.email\n        }),\n        credentials: \"include\"\n      });\n      if (response.status == 200) {\n        const data = await response.json();\n        dispatch(updateEmail(data));\n      }\n    }\n    if (payload.zipcode !== '') {\n      let response = await fetch(url(`/zipcode`), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'zipcode': payload.zipcode\n        }),\n        credentials: \"include\"\n      });\n      if (response.status == 200) {\n        const data = await response.json();\n        dispatch(updateZipcode(data));\n      }\n    }\n    if (payload.password1 !== '') {\n      let response = await fetch(url(`/password`), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'password': payload.password1\n        }),\n        credentials: \"include\"\n      });\n      if (response.status == 200) {\n        const data = await response.json();\n      }\n    }\n    if (payload.image !== '') {\n      let fd = new FormData();\n      fd.append(\"text\", \"text\");\n      fd.append('image', payload.image);\n      for (var pair of fd.entries()) {\n        console.log(pair[0] + ', ' + pair[1]);\n      }\n      let response = await fetch(url('/avatar'), {\n        method: 'PUT',\n        body: fd,\n        credentials: \"include\"\n      });\n      if (response.status == 200) {\n        const data = await response.json();\n        dispatch(updateAvatar(data));\n      }\n    }\n  };\n}\n_c = UpdateProfile_put;\nexport default {\n  riceZoneApp\n};\nvar _c;\n$RefreshReg$(_c, \"UpdateProfile_put\");","map":{"version":3,"names":["createReducer","current","AccordionTitle","storage","loadUsers","loadPosts","USERS_LOADED","USERS_ADDED","VALIDATE_USERS","RESET_VALIDATE","POSTS_LOADED","GET_POSTS","FITER_POSTS","ADD_POSTS","FETCH_FOLLOWERS","REMOVE_FOLLOWERS","ADD_FOLLOWERS","UPDATE_HEADLINE","UPDATE_PROFILE","GET_EMAIL","LOG_OUT","addUsers","validateUsers","resetValidate","GET_HEADLINE","getHeadline","updateHeadline","fetchFollowers","addFollowers","removeFollowers","getPosts","addPosts","getEmail","getZipcode","GET_ZIPCODE","getPhone","getDOB","GET_DOB","UPDATE_EMAIL","updateEmail","updateZipcode","UPDATE_ZIPCODE","getAvatar","GET_AVATAR","updateAvatar","url","path","initialState","userList","userExisted","userValidated","postList","currentPost","displayPost","email","zipcode","dob","currentUser","profile_username","userHeadline","avatar","followerList","followerHeadlineList","followerAddError","toggle","riceZoneApp","state","action","type","date","Date","userList_placehoder","payload","forEach","user","address","street","push","userNum","length","timeStamp","toLocaleString","defaultHeadLine","userExists","currentUser_register","result","username","logIn","postNum","articles","filterPosts","query","displayPosts","post","text","toLowerCase","includes","follower","following","headlinelist","headlineList","follower_headline_list","filter","toggle_follower","follower_add","follower_headline","headline","removeItem","fetchUsers","dispatch","getState","response","fetch","data","json","fetchPosts","createUser","method","headers","body","JSON","stringify","credentials","logInUser","status","fetchHeadline","updateHeadline_post","fetchFollowers_get","Promise","all","map","response_headline","addFollowers_put","fetchArticles","removeFollowers_delete","addArticles","addComments","req_body","comment","pid","editArticle","editComment","fetchEmail","fetchZipcode","fetchDOB","fetchAvatar","UpdateProfile_put","password1","image","fd","FormData","append","pair","entries","console","log"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer, current } from \"@reduxjs/toolkit\"\nimport { AccordionTitle } from \"flowbite-react/lib/esm/components/Accordion/AccordionTitle\";\nimport storage from 'redux-persist/lib/storage';\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS, FITER_POSTS, ADD_POSTS, FETCH_FOLLOWERS, REMOVE_FOLLOWERS, ADD_FOLLOWERS, UPDATE_HEADLINE, UPDATE_PROFILE, GET_EMAIL, LOG_OUT, addUsers, validateUsers, resetValidate, GET_HEADLINE, getHeadline, updateHeadline, fetchFollowers, addFollowers, removeFollowers, getPosts, addPosts, getEmail, getZipcode, GET_ZIPCODE, getPhone, getDOB, GET_DOB, UPDATE_EMAIL, updateEmail, updateZipcode, UPDATE_ZIPCODE, getAvatar, GET_AVATAR, updateAvatar } from \"./actions\"\n\n\nconst url = path => `http://localhost:3001${path}`;\nconst initialState = {\n    userList: [],\n    userExisted: false,\n    userValidated: false,\n    postList: [],\n    currentPost: \"\",\n    displayPost: \"\",\n    email: \"\",\n    zipcode: \"\",\n    dob: \"\",\n    currentUser: '',\n    profile_username: '',\n    userHeadline: \"\",\n    avatar: \"\",\n    followerList: [],\n    followerHeadlineList: [],\n    followerAddError: false,\n    toggle: false\n}\n\nexport function riceZoneApp( state = initialState, action) {\n    switch (action.type) {\n        //load placehoder users\n        case USERS_LOADED:\n            let date = new Date();\n            let userList_placehoder = []\n            action.payload.forEach(user => {\n                user['password1'] = user.address.street\n                user['zipcode'] = user.address.zipcode\n                userList_placehoder.push(user)\n            });\n            return {\n                ...state,\n                userNum: action.payload.length,\n                userList: [...userList_placehoder],\n                timeStamp: date.toLocaleString(),\n                defaultHeadLine: 'hello world'\n            }\n        case USERS_ADDED:\n            let payload = action.payload;\n            let userExists = false;\n            let userValidated = false;\n            let currentUser_register = ''; \n            if (payload.result === \"User already exist\") {\n                userExists = true;\n            } else {\n                userValidated = true;\n                currentUser_register = payload.username;\n            }\n            return {\n                ...state,\n                userExisted: userExists,\n                userValidated: userValidated,\n                currentUser: currentUser_register,\n            }\n        case VALIDATE_USERS:\n            let logIn = action.payload;\n            let currentUser = logIn.username;\n            return {\n                ...state,\n                userValidated: true,\n                currentUser: currentUser\n            }\n        case RESET_VALIDATE:\n            let toggle = !state.toggle;\n            return {\n                ...state,\n                toggle: toggle\n            }       \n        case POSTS_LOADED:\n            return {\n                ...state,\n                postList: [...action.payload],\n                postNum: action.payload.length\n            }  \n        case GET_POSTS:\n            return {\n                ...state,\n                currentPost: [...action.payload.articles],\n                displayPost: [...action.payload.articles]\n            }\n        case FITER_POSTS:\n            let filterPosts = [...state.currentPost];\n            let query = action.payload;\n            let displayPosts = [];\n            if (query === '') {\n                displayPosts = filterPosts;\n            } else {\n                filterPosts.forEach(post => {\n                    if (post.text.toLowerCase().includes(query.toLowerCase())) {\n                        displayPosts.push(post);\n                    }\n                })  \n            }\n            return {\n                ...state,\n                displayPost: displayPosts\n            }\n        case ADD_POSTS:\n            return {\n                ...state,\n                currentPost: [...action.payload.articles],\n                displayPost: [...action.payload.articles]\n            }  \n        case FETCH_FOLLOWERS:\n            let follower = [...action.payload.following.following];\n            let headlinelist = [...action.payload.headlineList];\n            return {\n                ...state,\n                followerList: [...follower],\n                followerHeadlineList: action.payload.headlineList\n            } \n        case REMOVE_FOLLOWERS:\n            let follower_headline_list = [...state.followerHeadlineList];\n            follower_headline_list = follower_headline_list.filter((user) => user.username !== action.payload.username);\n            return {\n                ...state,\n                followerList: [...action.payload.following.following],\n                followerHeadlineList: [...follower_headline_list]\n            }  \n        case ADD_FOLLOWERS:\n            let toggle_follower;\n            let followerAddError = state.followerAddError;\n            let follower_add = [...state.followerList];\n            let follower_headline = [...state.followerHeadlineList];\n            if (action.payload.following.following === \"user not found\" || action.payload.following.following === \"user already followed\") {\n                followerAddError = true;\n                toggle_follower = !state.toggle;\n            } else {\n                follower_add = [...action.payload.following.following]\n                followerAddError = false;\n                follower_headline.push(action.payload.headline);\n            }\n            return {\n                ...state,\n                followerList: follower_add,\n                followerAddError: followerAddError,\n                followerHeadlineList: [...follower_headline],\n                toggle: toggle_follower\n            }\n        case GET_HEADLINE:\n             return {\n                ...state,\n                userHeadline: action.payload.headline\n             }\n        case UPDATE_HEADLINE:\n            return {\n                ...state,\n                userHeadline: action.payload.headline\n            } \n        case GET_EMAIL:\n            return {\n                ...state,\n                email: action.payload.email\n            }\n        case UPDATE_EMAIL:\n            return {\n                ...state,\n                email: action.payload.email\n            }\n        case GET_ZIPCODE:\n            return {\n                ...state,\n                zipcode: action.payload.zipcode\n            }\n        case UPDATE_ZIPCODE:\n            return {\n                ...state,\n                zipcode: action.payload.zipcode\n            }\n        case GET_DOB:\n            return {\n                ...state,\n                dob: action.payload.dob\n            }\n        case GET_AVATAR:\n            return {\n                ...state,\n                avatar: action.payload.avatar\n            }\n        case GET_AVATAR:\n            return {\n                ...state,\n                avatar: action.payload.avatar\n            }      \n        case LOG_OUT:\n            storage.removeItem('root');\n            return initialState           \n        default:\n            return state;\n    }\n}\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n}\n\n\nexport function createUser(payload) {\n    return async function createUser(dispatch, getState) {\n        const response = await fetch(url('/register'), {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n            credentials: \"include\"\n        });\n        const data = await response.json();\n        dispatch(addUsers(data));\n    }\n}\n\nexport function logInUser(payload) {\n    return async function logInUser(dispatch, getState) {\n        const response = await fetch(url('/login'), {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(validateUsers(data));\n        } else {\n            dispatch(resetValidate());\n        }\n    }\n}\n\nexport function fetchHeadline(payload) {\n    return async function fetchHeadline(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/headline/${payload.username}`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getHeadline(data));\n        }\n    }\n}\n\nexport function updateHeadline_post(payload) {\n    return async function updateHeadline_post(dispatch, getState) {\n        let response;\n        let body = {headline: payload.headline}\n        response = await fetch(url(`/headline`), {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify(body),\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(updateHeadline(data));\n        }\n    }\n}\n\nexport function fetchFollowers_get(payload) {\n    return async function fetchFollowers_get(dispatch, getState) {\n        const response = await fetch(url(`/following/${payload.username}`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const following = await response.json();\n            let followerHeadlineList = [];\n            await Promise.all(following.following.map(async (following) => {\n                const response_headline = await fetch(url(`/headline/${following}`), {\n                    method: 'GET',\n                    headers: { 'Content-Type': 'application/json'},\n                    credentials: \"include\"\n                });\n                let follower = await response_headline.json();\n                followerHeadlineList.push(follower);\n            }))\n            const data = {following: following, headlineList: followerHeadlineList};\n            dispatch(fetchFollowers(data));\n        }\n    }\n}\n\nexport function addFollowers_put(payload) {\n    return async function addFollowers_put(dispatch, getState) {\n        const response = await fetch(url(`/following/${payload.follower}`), {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const following = await response.json();\n            const response_headline = await fetch(url(`/headline/${payload.follower}`), {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json'},\n                credentials: \"include\"\n            });\n            const headline = await response_headline.json();\n            const data = {following: following, headline: headline}\n            dispatch(fetchArticles(data));\n            dispatch(addFollowers(data));\n        }\n    }\n}\n\nexport function removeFollowers_delete(payload) {\n    return async function fetchFollowers_get(dispatch, getState) {\n        const response = await fetch(url(`/following/${payload.username}`), {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const following = await response.json();\n            const data = {username: payload.username, following: following};\n            dispatch(fetchArticles(data));\n            dispatch(removeFollowers(data));\n        }\n    }\n}\n\nexport function fetchArticles(payload) {\n    return async function fetchArticles(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/articles`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getPosts(data));\n        }\n    }\n}\n\nexport function addArticles(payload) {\n    return async function addArticles(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/article`), {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify({text: payload.body}),\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(addPosts(data));\n        }\n    }\n}\n\nexport function addComments(payload) {\n    return async function addComments(dispatch, getState) {\n        let req_body = {};\n        req_body['text'] = payload.comment;\n        req_body['commentId'] = -1;\n        let response = await fetch(url(`/articles/${payload.pid}`), {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify(req_body),\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(fetchArticles(data));\n        }\n    }\n}\n\nexport function editArticle(payload) {\n    return async function editArticle(dispatch, getState) {\n        let req_body = {};\n        req_body['text'] = payload.text;\n        let response = await fetch(url(`/articles/${payload.pid}`), {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify(req_body),\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(fetchArticles(data));\n        }\n    }\n}\n\nexport function editComment(payload) {\n    return async function editComment(dispatch, getState) {\n        let response = await fetch(url(`/articles/${payload.pid}`), {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify(payload),\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(fetchArticles(data));\n        }\n    }\n}\n\nexport function fetchEmail(payload) {\n    return async function fetchEmail(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/email`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getEmail(data));\n        }\n    }\n}\n\nexport function fetchZipcode(payload) {\n    return async function fetchZipcode(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/zipcode`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getZipcode(data));\n        }\n    }\n}\n\nexport function fetchDOB(payload) {\n    return async function fetchDOB(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/dob`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getDOB(data));\n        }\n    }\n}\n\nexport function fetchAvatar(payload) {\n    return async function fetchAvatar(dispatch, getState) {\n        let response;\n        response = await fetch(url(`/avatar/${payload}`), {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'},\n            credentials: \"include\"\n        });\n        if (response.status == 200) {\n            const data = await response.json();\n            dispatch(getAvatar(data));\n        }\n    }\n}\n\nexport function UpdateProfile_put(payload) {\n    return async function UpdateProfile_put(dispatch, getState) {\n        if (payload.email !== '') {\n            let response = await fetch(url(`/email`), {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json'},\n                body: JSON.stringify({'email': payload.email}),\n                credentials: \"include\"\n            });\n            if (response.status == 200) {\n                const data = await response.json();\n                dispatch(updateEmail(data));\n            }\n        }\n        if (payload.zipcode !== '') {\n            let response = await fetch(url(`/zipcode`), {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json'},\n                body: JSON.stringify({'zipcode': payload.zipcode}),\n                credentials: \"include\"\n            });\n            if (response.status == 200) {\n                const data = await response.json();\n                dispatch(updateZipcode(data));\n            }\n        }\n        if (payload.password1 !== '') {\n            let response = await fetch(url(`/password`), {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json'},\n                body: JSON.stringify({'password': payload.password1}),\n                credentials: \"include\"\n            });\n            if (response.status == 200) {\n                const data = await response.json();\n            }\n        }\n        if (payload.image !== '') {\n            let fd = new FormData();\n            fd.append(\"text\", \"text\");\n            fd.append('image', payload.image);\n            for (var pair of fd.entries()) {\n                console.log(pair[0]+ ', ' + pair[1]); \n            }\n            let response = await fetch(url('/avatar'), {\n                method: 'PUT',\n                body: fd,\n                credentials: \"include\"\n            });\n            if (response.status == 200) {\n                const data = await response.json();\n                dispatch(updateAvatar(data))\n            }\n        }\n    }\n}\n\nexport default {riceZoneApp} ;"],"mappings":"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"},"metadata":{},"sourceType":"module"}