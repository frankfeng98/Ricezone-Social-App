{"ast":null,"code":"import _objectSpread from \"/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext';\nexport var AccordionPanel = function AccordionPanel(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var alwaysOpen = props.alwaysOpen;\n  var _useState = useState(props.isOpen),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    _setOpen = _useState2[1];\n  var provider = alwaysOpen ? _objectSpread(_objectSpread({}, props), {}, {\n    isOpen: isOpen,\n    setOpen: function setOpen() {\n      return _setOpen(!isOpen);\n    }\n  }) : props;\n  return _jsx(AccordionPanelContext.Provider, {\n    value: provider,\n    children: children\n  });\n};","map":{"version":3,"names":["jsx","_jsx","useState","AccordionPanelContext","AccordionPanel","children","props","alwaysOpen","isOpen","setOpen","provider","Provider","value"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw7/final-frontend-frankfeng98/ricezone/node_modules/flowbite-react/lib/esm/components/Accordion/AccordionPanel.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext';\nexport const AccordionPanel = ({ children, ...props }) => {\n    const { alwaysOpen } = props;\n    const [isOpen, setOpen] = useState(props.isOpen);\n    const provider = alwaysOpen\n        ? {\n            ...props,\n            isOpen,\n            setOpen: () => setOpen(!isOpen),\n        }\n        : props;\n    return _jsx(AccordionPanelContext.Provider, { value: provider, children: children });\n};\n"],"mappings":";;;;AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAc,OAA+B;EAAA,IAAzBC,QAAQ,QAARA,QAAQ;IAAKC,KAAK;EAC/C,IAAQC,UAAU,GAAKD,KAAK,CAApBC,UAAU;EAClB,gBAA0BL,QAAQ,CAACI,KAAK,CAACE,MAAM,CAAC;IAAA;IAAzCA,MAAM;IAAEC,QAAO;EACtB,IAAMC,QAAQ,GAAGH,UAAU,mCAEhBD,KAAK;IACRE,MAAM,EAANA,MAAM;IACNC,OAAO,EAAE;MAAA,OAAMA,QAAO,CAAC,CAACD,MAAM,CAAC;IAAA;EAAA,KAEjCF,KAAK;EACX,OAAOL,IAAI,CAACE,qBAAqB,CAACQ,QAAQ,EAAE;IAAEC,KAAK,EAAEF,QAAQ;IAAEL,QAAQ,EAAEA;EAAS,CAAC,CAAC;AACxF,CAAC"},"metadata":{},"sourceType":"module"}