{"ast":null,"code":"import { createReducer, current } from \"@reduxjs/toolkit\";\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS } from \"./actions\";\nconst initialState = {\n  userList: [],\n  userValidated: false,\n  postList: [],\n  currentPost: [],\n  userNum: 0,\n  currentUser: ''\n};\nexport function riceZoneApp() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // update the rice zone state\n    case USERS_LOADED:\n      return {\n        ...state,\n        userNum: action.payload.length,\n        userList: [...action.payload]\n      };\n    case USERS_ADDED:\n      let userList = [...state.userList];\n      let payload = action.payload;\n      let num = state.userNum;\n      num++;\n      payload['id'] = state.userNum + 1;\n      userList.push(payload);\n      return {\n        ...state,\n        userList: userList,\n        userNum: num,\n        currentUser: num\n      };\n    case VALIDATE_USERS:\n      let logIn = action.payload;\n      let result = false;\n      let userID;\n      state.userList.forEach(user => {\n        if (user.username === logIn.username) {\n          if (user.password1) {\n            if (user.password1 == logIn.password) {\n              result = true;\n              userID = user.id;\n            }\n          } else {\n            if (user.address.street == logIn.password) {\n              console.log(\"True\");\n              result = true;\n              userID = user.id;\n            }\n          }\n        }\n      });\n      return {\n        ...state,\n        usersValidated: result,\n        currentUser: userID\n      };\n    case RESET_VALIDATE:\n      return {\n        ...state,\n        usersValidated: false\n      };\n    case POSTS_LOADED:\n      return {\n        ...state,\n        postList: [...action.payload]\n      };\n    case GET_POSTS:\n      let posts = [...state.postList];\n      let currentPosts = [];\n      posts.forEach(post => {\n        console.log(post.userId);\n        console.log(action.payload);\n        console.log(post.userId === action.payload);\n        if (post.userId === action.payload) {\n          currentPosts.push(post);\n        }\n      });\n      console.log(currentPosts);\n      return {\n        ...state,\n        currentPost: [...currentPosts]\n      };\n    default:\n      return state;\n  }\n}\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n}\nexport default {\n  riceZoneApp\n};","map":{"version":3,"names":["createReducer","current","loadUsers","loadPosts","USERS_LOADED","USERS_ADDED","VALIDATE_USERS","RESET_VALIDATE","POSTS_LOADED","GET_POSTS","initialState","userList","userValidated","postList","currentPost","userNum","currentUser","riceZoneApp","state","action","type","payload","length","num","push","logIn","result","userID","forEach","user","username","password1","password","id","address","street","console","log","usersValidated","posts","currentPosts","post","userId","fetchUsers","dispatch","getState","response","fetch","data","json","fetchPosts"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw4-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer, current } from \"@reduxjs/toolkit\"\nimport { loadUsers, loadPosts, USERS_LOADED, USERS_ADDED, VALIDATE_USERS, RESET_VALIDATE, POSTS_LOADED, GET_POSTS } from \"./actions\"\n\nconst initialState = {\n    userList: [],\n    userValidated: false,\n    postList: [],\n    currentPost: [],\n    userNum: 0,\n    currentUser: ''\n}\n\nexport function riceZoneApp( state = initialState, action) {\n    switch (action.type) {\n        // update the rice zone state\n        case USERS_LOADED:\n            return {\n                ...state,\n                userNum: action.payload.length,\n                userList: [...action.payload]\n            }\n        case USERS_ADDED:\n            let userList = [...state.userList];\n            let payload = action.payload;\n            let num = state.userNum;\n            num++;\n            payload['id'] = state.userNum + 1;\n            userList.push(payload);\n            return {\n                ...state,\n                userList: userList,\n                userNum: num,\n                currentUser: num\n            }\n        case VALIDATE_USERS:\n            let logIn = action.payload;\n            let result = false;\n            let userID;\n            state.userList.forEach(user => {\n                if (user.username === logIn.username) {\n                    if (user.password1) {\n                        if (user.password1 == logIn.password) {\n                            result = true;\n                            userID = user.id; \n                        }\n                    } else {\n                        if (user.address.street == logIn.password) {\n                            console.log(\"True\");\n                            result = true;\n                            userID = user.id; \n                        }\n                    }\n                    \n                }\n            });\n            return {\n                ...state,\n                usersValidated: result,\n                currentUser: userID\n            }\n        case RESET_VALIDATE:\n            return {\n                ...state,\n                usersValidated: false\n            }       \n        case POSTS_LOADED:\n            return {\n                ...state,\n                postList: [...action.payload]\n            }  \n        case GET_POSTS:\n            let posts = [...state.postList]\n            let currentPosts = [];\n            posts.forEach(post => {\n                console.log(post.userId)\n                console.log(action.payload)\n                console.log(post.userId === action.payload)\n                if (post.userId === action.payload) {\n                    currentPosts.push(post);\n                }\n            });\n            console.log(currentPosts);\n            return {\n                ...state,\n                currentPost: [...currentPosts]\n            }       \n        default:\n            return state;\n    }\n}\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n}\n\nexport default {riceZoneApp} ;"],"mappings":"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"},"metadata":{},"sourceType":"module"}