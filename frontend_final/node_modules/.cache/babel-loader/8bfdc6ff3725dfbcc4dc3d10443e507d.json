{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { loadUsers, loadPosts } from \"./actions\";\nconst initialState = {\n  userList: [],\n  userValidated: false,\n  postList: []\n};\nconst riceZoneApp = createReducer([], builder => {\n  builder.addCase('usersLoaded', (state, action) => {\n    return {\n      ...state,\n      userList: [...action.payload],\n      userValidated: false\n    };\n  }).addCase('usersAdded', (state, action) => {\n    let userList = [...state.userList];\n    userList.push(action.payload);\n    return {\n      ...state,\n      userList: userList\n    };\n  }).addCase('usersValidated', (state, action) => {\n    let logIn = action.payload;\n    let result = false;\n    state.userList.forEach(user => {\n      console.log(user.username);\n      console.log(logIn.username);\n      if (user.username === logIn.username) {\n        console.log(user.address.street);\n        console.log(logIn.password);\n        if (user.password1) {\n          if (user.password1 == logIn.password) {\n            result = true;\n          }\n        } else {\n          console.log(user.address.street == logIn.password);\n          if (user.address.street == logIn.password) {\n            result = true;\n          }\n        }\n      }\n    });\n    return {\n      ...state,\n      userValidated: result\n    };\n  }).addCase('resetValidate', (state, action) => {\n    let result = !state.userValidated;\n    console.log(result);\n    return {\n      ...state,\n      userValidated: result\n    };\n  }).addCase('postsLoaded', (state, action) => {\n    return {\n      ...state,\n      postList: [...action.payload]\n    };\n  }).addDefaultCase((state, action) => {\n    return state;\n  });\n});\nexport async function fetchUsers(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const data = await response.json();\n  dispatch(loadUsers(data));\n}\nexport async function fetchPosts(dispatch, getState) {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  dispatch(loadPosts(data));\n  console.log(getState());\n}\nexport default {\n  riceZoneApp\n};","map":{"version":3,"names":["createReducer","loadUsers","loadPosts","initialState","userList","userValidated","postList","riceZoneApp","builder","addCase","state","action","payload","push","logIn","result","forEach","user","console","log","username","address","street","password","password1","addDefaultCase","fetchUsers","dispatch","getState","response","fetch","data","json","fetchPosts"],"sources":["/Users/frankfeng/Desktop/Academic/Rice/COMP531/hw4-frankfeng98/ricezone/src/reducers.js"],"sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\"\nimport { loadUsers, loadPosts } from \"./actions\"\n\nconst initialState = {\n    userList: [],\n    userValidated: false,\n    postList: []\n}\n\nconst riceZoneApp = createReducer([], (builder) => {\n    builder\n        .addCase('usersLoaded', (state, action) => {\n            return {\n                ...state,\n                userList: [...action.payload],\n                userValidated: false\n            }\n        })\n        .addCase('usersAdded', (state, action) => {\n            let userList = [...state.userList];\n            userList.push(action.payload);\n            return {\n                ...state,\n                userList: userList\n            }\n        })\n        .addCase('usersValidated', (state, action) => {\n            let logIn = action.payload;\n            let result = false;\n            state.userList.forEach(user => {\n                console.log(user.username);\n                console.log(logIn.username);\n                if (user.username === logIn.username) {\n                    console.log(user.address.street);\n                    console.log(logIn.password);\n                    if (user.password1) {\n                        if (user.password1 == logIn.password) {\n                            result = true;\n                        }\n                    } else {\n                        console.log(user.address.street == logIn.password);\n                        if (user.address.street == logIn.password) {\n                            result = true;\n                        }\n                    }\n                    \n                }\n            });\n            return {\n                ...state,\n                userValidated: result\n            }\n        })\n        .addCase('resetValidate', (state, action) => {\n            let result = !state.userValidated;\n            console.log(result)\n            return {\n                ...state,\n                userValidated: result\n            }\n        })\n        .addCase('postsLoaded', (state, action) => {\n            return {\n                ...state,\n                postList: [...action.payload]\n            }\n        })\n        .addDefaultCase((state, action) => {\n            return state;\n        })\n})\n\nexport async function fetchUsers(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await response.json();\n    dispatch(loadUsers(data));\n}\n\nexport async function fetchPosts(dispatch, getState) {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const data = await response.json();\n    dispatch(loadPosts(data));\n    console.log(getState());\n}\n\nexport default {riceZoneApp} ;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,EAAEC,SAAS,QAAQ,WAAW;AAEhD,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE,KAAK;EACpBC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,WAAW,GAAGP,aAAa,CAAC,EAAE,EAAGQ,OAAO,IAAK;EAC/CA,OAAO,CACFC,OAAO,CAAC,aAAa,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IACvC,OAAO;MACH,GAAGD,KAAK;MACRN,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACC,OAAO,CAAC;MAC7BP,aAAa,EAAE;IACnB,CAAC;EACL,CAAC,CAAC,CACDI,OAAO,CAAC,YAAY,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IACtC,IAAIP,QAAQ,GAAG,CAAC,GAAGM,KAAK,CAACN,QAAQ,CAAC;IAClCA,QAAQ,CAACS,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;IAC7B,OAAO;MACH,GAAGF,KAAK;MACRN,QAAQ,EAAEA;IACd,CAAC;EACL,CAAC,CAAC,CACDK,OAAO,CAAC,gBAAgB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IAC1C,IAAIG,KAAK,GAAGH,MAAM,CAACC,OAAO;IAC1B,IAAIG,MAAM,GAAG,KAAK;IAClBL,KAAK,CAACN,QAAQ,CAACY,OAAO,CAACC,IAAI,IAAI;MAC3BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,QAAQ,CAAC;MAC1BF,OAAO,CAACC,GAAG,CAACL,KAAK,CAACM,QAAQ,CAAC;MAC3B,IAAIH,IAAI,CAACG,QAAQ,KAAKN,KAAK,CAACM,QAAQ,EAAE;QAClCF,OAAO,CAACC,GAAG,CAACF,IAAI,CAACI,OAAO,CAACC,MAAM,CAAC;QAChCJ,OAAO,CAACC,GAAG,CAACL,KAAK,CAACS,QAAQ,CAAC;QAC3B,IAAIN,IAAI,CAACO,SAAS,EAAE;UAChB,IAAIP,IAAI,CAACO,SAAS,IAAIV,KAAK,CAACS,QAAQ,EAAE;YAClCR,MAAM,GAAG,IAAI;UACjB;QACJ,CAAC,MAAM;UACHG,OAAO,CAACC,GAAG,CAACF,IAAI,CAACI,OAAO,CAACC,MAAM,IAAIR,KAAK,CAACS,QAAQ,CAAC;UAClD,IAAIN,IAAI,CAACI,OAAO,CAACC,MAAM,IAAIR,KAAK,CAACS,QAAQ,EAAE;YACvCR,MAAM,GAAG,IAAI;UACjB;QACJ;MAEJ;IACJ,CAAC,CAAC;IACF,OAAO;MACH,GAAGL,KAAK;MACRL,aAAa,EAAEU;IACnB,CAAC;EACL,CAAC,CAAC,CACDN,OAAO,CAAC,eAAe,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IACzC,IAAII,MAAM,GAAG,CAACL,KAAK,CAACL,aAAa;IACjCa,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;IACnB,OAAO;MACH,GAAGL,KAAK;MACRL,aAAa,EAAEU;IACnB,CAAC;EACL,CAAC,CAAC,CACDN,OAAO,CAAC,aAAa,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IACvC,OAAO;MACH,GAAGD,KAAK;MACRJ,QAAQ,EAAE,CAAC,GAAGK,MAAM,CAACC,OAAO;IAChC,CAAC;EACL,CAAC,CAAC,CACDa,cAAc,CAAC,CAACf,KAAK,EAAEC,MAAM,KAAK;IAC/B,OAAOD,KAAK;EAChB,CAAC,CAAC;AACV,CAAC,CAAC;AAEF,OAAO,eAAegB,UAAU,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClCL,QAAQ,CAAC1B,SAAS,CAAC8B,IAAI,CAAC,CAAC;AAC7B;AAEA,OAAO,eAAeE,UAAU,CAACN,QAAQ,EAAEC,QAAQ,EAAE;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClCL,QAAQ,CAACzB,SAAS,CAAC6B,IAAI,CAAC,CAAC;EACzBb,OAAO,CAACC,GAAG,CAACS,QAAQ,EAAE,CAAC;AAC3B;AAEA,eAAe;EAACrB;AAAW,CAAC"},"metadata":{},"sourceType":"module"}